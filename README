# Configuração do Projeto

Este projeto é executado utilizando **Docker** para conteinerização e **Docker Compose** para orquestrar os diferentes serviços. Certifique-se de ter ambos instalados em sua máquina antes de prosseguir.

## Pré-requisitos

* **Docker:** Consulte a [documentação oficial do Docker](https://docs.docker.com/get-docker/) para instalação.
* **Docker Compose:** Geralmente instalado com o Docker Desktop. Caso necessite, veja a [documentação oficial do Docker Compose](https://docs.docker.com/compose/install/).

## Configuração das Variáveis de Ambiente

Cada componente do projeto possui suas próprias configurações de ambiente gerenciadas através de arquivos `.env` localizados em seus respectivos diretórios (`evolution-api`, `n8n`, `postgres`).

### `evolution-api`

O diretório `evolution-api` contém a configuração para a API Evolution. O arquivo `.env` neste diretório inclui variáveis como:

* `DATABASE_URL`: A URL de conexão para o banco de dados da API (ex: `postgresql://usuario:senha@host:porta/banco_de_dados`).
* `API_KEY`: A chave de API para autenticação.
* `AUTH_SECRET`: Segredo usado para geração de tokens de autenticação.
* `NODE_ENV`: O ambiente em que a API está rodando (development, production, test).

**Para configurar a API Evolution:**

1.  Navegue até o diretório `evolution-api`.
2.  Copie o arquivo `.env.example` (se existir) para `.env`. Caso contrário, crie um novo arquivo chamado `.env`.
3.  Edite o arquivo `.env` e defina os valores corretos para as variáveis de ambiente.

### `n8n`

O diretório `n8n` contém a configuração para a instância do n8n. O arquivo `.env` neste diretório inclui variáveis como:

* `N8N_HOST`: O hostname para acessar a interface do n8n (ex: `localhost`).
* `N8N_PORT`: A porta em que o n8n será executado (ex: `5678`).
* `N8N_PROTOCOL`: O protocolo a ser usado (http ou https).
* `N8N_BASIC_AUTH_USER`: O nome de usuário para autenticação básica (se habilitada).
* `N8N_BASIC_AUTH_PASSWORD`: A senha para autenticação básica (se habilitada).
* Outras variáveis específicas para configurações de banco de dados, serviços de e-mail, etc. Consulte o arquivo `.env` para obter detalhes.

**Para configurar o n8n:**

1.  Navegue até o diretório `n8n`.
2.  Copie o arquivo `.env.example` (se existir) para `.env`. Caso contrário, crie um novo arquivo chamado `.env`.
3.  Edite o arquivo `.env` e defina os valores corretos para as variáveis de ambiente.

### `postgres`

O diretório `postgres` contém a configuração para o banco de dados PostgreSQL. O arquivo `.env` neste diretório inclui variáveis como:

* `POSTGRES_USER`: O nome de usuário para conectar ao banco de dados PostgreSQL.
* `POSTGRES_PASSWORD`: A senha para o usuário do PostgreSQL.
* `POSTGRES_DB`: O nome do banco de dados padrão a ser criado.
* `POSTGRES_PORT`: A porta em que o servidor PostgreSQL estará escutando (ex: `5432`).

**Para configurar o PostgreSQL:**

1.  Navegue até o diretório `postgres`.
2.  Copie o arquivo `.env.example` (se existir) para `.env`. Caso contrário, crie um novo arquivo chamado `.env`.
3.  Edite o arquivo `.env` e defina os valores corretos para as variáveis de ambiente.

## Executando o Projeto com Docker Compose

Este projeto utiliza um arquivo `docker-compose.yml` na raiz para definir e orquestrar os contêineres dos diferentes serviços.

**Para iniciar o projeto:**

1.  Abra o terminal ou prompt de comando.
2.  Navegue até o diretório raiz do seu projeto (onde o arquivo `docker-compose.yml` está localizado).
3.  Execute o seguinte comando:

    ```bash
    docker-compose up -d
    ```

    Este comando irá criar e iniciar os contêineres definidos no `docker-compose.yml` em segundo plano (`-d`).

**Para acompanhar os logs dos serviços:**

```bash
docker-compose logs -f
